#!perl

use strict;
use warnings;

use vars '$name', '$gender';
use ScriptX (
    'Getopt::Long' => {
        spec => ['name=s' => \$name, 'gender=s' => \$gender],
    },
    'Run',
);

sub run {
    my ($self, $stash) = @_;

    unless ($name) {
        print "Please specify --name!\n";
        exit 1;
    }
    unless ($gender) {
        print "Please specify --gender!\n";
        exit 1;
    }
    unless ($gender =~ /\A[mf]\z/i) {
        print "Invalid value in --gender, please specify m|f!\n";
        exit 1;
    }

    print "Hello, ", ($gender =~ /m/i ? "Mr." : "Mrs."), " $name!\n";
}

ScriptX->run;

# ABSTRACT: Parse command-line options using Getopt::Long
# PODNAME:

=head1 SYNOPSIS

 % script-eg-getopt-long
 Please specify --name!

 % script-eg-getopt-long --name=Budi
 Please specify --gender!

 % script-eg-getopt-long --name=Budi --gender=x
 Invalid value in --gender, please specify m|f!

 % script-eg-getopt-long --name=Budi --gender=m
 Hello, Mr. Budi!

 % script-eg-getopt-long --name=Budi --gender=m
 Unknown option: foo
 Hello, Mr. Budi!


=head1 DESCRIPTION

This script demonstrates the use of L<ScriptX::Getopt::Long> which, admittedly,
does not do much. It's okay if you want to load and use L<Getopt::Long>
directly.


=head1 SEE ALSO

L<scriptx-eg-getopt-specless>
